#+TITLE:Jarizleifr's Emacs Config
* Initial setup
** Package management
Most packages come from MELPA package repository, so the first thing is to plug our Emacs into there.

*** Setup package.el and MELPA
#+begin_src elisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-refresh-contents)
(package-initialize)
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
(when (daemonp)
  (exec-path-from-shell-initialize))
#+end_src

*** Setup use-package 
Once we have access to MELPA, we need use-package, which will greatly simplify package management and configuration.

The config is set to always install use-package if its missing.

#+begin_src elisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
#+end_src

*** Shell environment
#+begin_src elisp
(use-package exec-path-from-shell :ensure t)
#+end_src

* Commands
** Evil-mode
Evil mode provides Vim-keybindings for Emacs, making it immediately feel much more familiar.

#+begin_src elisp
(use-package evil
  :ensure t
  :init ;; Setup evil-mode in init, as these options change how package is loaded.
  (setq evil-want-C-i-jump nil
        evil-undo-system 'undo-redo
        evil-want-integration t
        evil-want-keybinding nil
        evil-want-C-u-scroll t
        evil-vsplit-window-right t
        evil-split-window-below t)
  (evil-mode))
(use-package evil-org
  :ensure t
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
  #+end_src

** Evil-collection
Evil collection provides some extra keybindings for other plugins, making everything feel more consistent with evil-mode.

#+begin_src elisp
(use-package evil-collection
  :ensure t
  :after evil
  :config
  (evil-collection-init))
#+end_src

** General
General provides a nice way to configure ~evil~-compatible keybindings with a ~:general~ keyword and mapping functions like ~imap~, ~nvmap~, representing the different evil states where the bindings are active.

#+begin_src elisp
(use-package general
  :ensure t
  :config
  (general-evil-setup t))
#+end_src

** Which key
~which-key~ can be used to grant descriptions to custom keybindings, which are then shown whenever looking for commands, improving discoverability.

#+begin_src elisp
(use-package which-key
  :ensure t
  :init
  (which-key-setup-minibuffer))
(which-key-mode)
#+end_src

* Navigation and Completion
** Consult
~consult~ provides search and navigation commands for buffers, imenu, files, etc.

#+begin_src elisp
(use-package consult :ensure t)
#+end_src

** Find File in Project
~find-file-in-project~ helps us search through folders that use version control like Git. I used to use ~projectile~, but find this is way more lighter and just as good setup for my use case. It uses regular ~find-file~ as fallback when not in a Git folder, so it's a nifty all-around replacer for finding files.

#+begin_src elisp
(use-package find-file-in-project
  :ensure t
  :config
  (setq ffip-use-rust-fd t))
#+end_src

** Vertico
Vertico is a completion framework, similar to Helm, Ivy, ~fido-vertical-mode~ etc. I used to use Helm, but moved to Vertico in 2024.

#+begin_src elisp
(use-package vertico
  :ensure t
  :after (consult find-file-in-project)
  :init (vertico-mode)
  :config
  (setq completion-styles '(basic partial-completion emacs22 flex)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion))))
  :general
  (nvmap :keymaps 'override :prefix "SPC"
    "SPC" '(execute-extended-command :which-key "Command")
    "b"   '(consult-buffer :which-key "Buffers")
    "s"   '(consult-bookmark :which-key "Bookmarks")
    "i"   '(consult-imenu :which-key "Indices")
    "."   '(find-file :which-key "Find file")
    "f"   '(consult-flymake :which-key "Flymake")
    "p p" '(find-file-in-project :which-key "Find file in project")
    "p f" '(consult-git-grep :which-key "Grep in project")))
#+end_src

* Global controls 
There are few keybindings that don't relate to any of the packages, so we'll keep them here as a separate section.

#+begin_src elisp 
(nvmap :prefix "SPC"
  "r" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload emacs config"))
;; Increase/decrease text size with a keyboard command
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src 

** Disable far keys
I tend to use arrow keys and home/end/del/pgup/pgdn as a crutch and I want to learn out of this behavior. So we'll disable the offending keys and display a message instead.
#+begin_src elisp
(defun vi-keys-notification ()
  (interactive)
  (message "Use HJKL to move cursor"))
(general-def '(normal visual insert) "<up>" 'vi-keys-notification)
(general-def '(normal visual insert) "<down>" 'vi-keys-notification)
(general-def '(normal visual insert) "<left>" 'vi-keys-notification)
(general-def '(normal visual insert) "<right>" 'vi-keys-notification)

(general-def '(normal visual insert) "<deletechar>" (lambda () (interactive) (message "Use x to delete character")))
(general-def '(normal visual insert) "<insert>" (lambda () (interactive) (message "Use i to insert character")))
(general-def '(normal visual insert) "<home>" (lambda () (interactive) (message "Use 0 or ^ (S-4) to return cursor")))
(general-def '(normal visual insert) "<end>" (lambda () (interactive) (message "Use $ (M-4) to move cursor to the end")))
(general-def '(normal visual insert) "<prior>" (lambda () (interactive) (message "Use (C-B) to go backwards")))
(general-def '(normal visual insert) "<next>" (lambda () (interactive) (message "Use (C-F) to go forwards")))
#+end_src

* GUI
I use the Base16 theme system and provide a few overrides to make things slightly better for my personal use.

Use Iosevka Term as the monospaced font, use Aile and Etoile for variable pitch mode, for example in org-mode body text and headers.

** Customizations
#+begin_src elisp
(defun jzlfr/set-theme-overrides (theme-colors)
  "Set overrides for some theme elements"
  (let ((base00 (plist-get theme-colors :base00))
        (base01 (plist-get theme-colors :base01))
        (base02 (plist-get theme-colors :base02))
        (base08 (plist-get theme-colors :base08))
        (base09 (plist-get theme-colors :base09))
        (base0B (plist-get theme-colors :base0B))
        (base0D (plist-get theme-colors :base0D))
        (base0E (plist-get theme-colors :base0E)))

    ;; Setup evil mode cursors
    (setq evil-emacs-state-cursor   `(,base0D box)
          evil-insert-state-cursor  `(,base0D bar)
          evil-motion-state-cursor  `(,base0E box)
          evil-normal-state-cursor  `(,base0B box)
          evil-replace-state-cursor `(,base08 bar)
          evil-visual-state-cursor  `(,base09 box))

    ;; Setup selection background color in vertico minibuffer
    (set-face-attribute 'vertico-current nil :background base02)

    ;; Default fonts
    (set-face-attribute 'default nil :font "iosevka term ss14-11")   ;; Monospace font for default text
    (set-face-attribute 'variable-pitch nil :font "iosevka aile-11") ;; Quasi-proportional font for body text

    ;; Mode-line text
    (custom-set-faces
     '(mode-line ((t (:font "iosevka aile-8"))))
     '(mode-line-inactive ((t (:font "iosevka aile-8")))))

    ;; Org-mode header fonts
    (set-face-attribute 'org-document-title nil :height 1.5 :weight 'bold :foreground base0E :font "iosevka etoile-16")
    (set-face-attribute 'org-level-1        nil :height 1.4 :weight 'bold :foreground base0E :font "iosevka etoile-14")
    (set-face-attribute 'org-level-2        nil :height 1.2 :weight 'bold :foreground base0E :font "iosevka etoile-13")
    (set-face-attribute 'org-level-3        nil :height 1.1 :weight 'bold :foreground base0E :font "iosevka etoile-12")
    (set-face-attribute 'org-level-4        nil :height 1.0 :weight 'bold :foreground base0E :font "iosevka etoile-11")

    ;; Use monospace font (fixed-pitch) for many org-mode constructs
    (set-face-attribute 'fixed-pitch nil :family "iosevka term ss14" :height 0.8)
    (let ((org-fixed-pitch-faces '(org-block org-block-begin-line org-block-end-line org-code
                                             org-document-info-keyword org-meta-line org-table
                                             org-verbatim org-drawer org-special-keyword org-tag org-hide)))
      (set-face-attribute 'org-hide nil :foreground base00)
      (dolist (face org-fixed-pitch-faces)
        (set-face-attribute face nil :inherit 'fixed-pitch)))

    ;; Set org-habit theme for done/todo cells
    (let ((habit-faces-done '(org-habit-clear-face org-habit-clear-future-face org-habit-ready-face org-habit-ready-future-face org-habit-alert-face org-habit-alert-future-face))
          (habit-faces-todo '(org-habit-overdue-face org-habit-overdue-future-face)))
      (dolist (face habit-faces-done)
        (set-face-attribute face nil :background base02))
      (dolist (face habit-faces-todo)
        (set-face-attribute face nil :background base01))
      ;; Highlight habits that can be done today
      (set-face-attribute 'org-habit-ready-face nil :foreground base0B))))
#+end_src

#+begin_src elisp
(use-package base16-theme
  :ensure t
  :after (org org-habit evil vertico)
  :init (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  :config
  (load-theme 'base16-jarizleifr t)
  ;; When using daemon, set frame icon and fonts whenever new frame is created
  (let ((colors base16-jarizleifr-colors))
    (when (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (let ((frame-icon "/home/jarizleifr/.icons/jarizleifr_icons/apps/scalable/emacs.svg"))
                    (set-frame-parameter (car (frame-list)) 'icon-type frame-icon)) ;; Set frame icon
                  (with-selected-frame frame (jzlfr/set-theme-overrides colors))))) ;; Set overrides
    ;; Make sure overrides are set on config reload as well
    (jzlfr/set-theme-overrides colors)))
#+end_src

** Icons
#+begin_src elisp 
(use-package nerd-icons :ensure t)
(use-package nerd-icons-dired
  :ensure t
  :after nerd-icons
  :config
  (add-hook 'dired-mode-hook 'nerd-icons-dired-mode))
#+end_src

** Modeline
Include Doom Emacs modeline (status bar), which looks nice. Doom modeline requires the ~nerd-icons~ package.

#+begin_src elisp 
(use-package doom-modeline
  :ensure t
  :after (nerd-icons find-file-in-project)
  :init
  (setq column-number-mode t                   ;; Enable column numbers in modeline
        doom-modeline-window-width-limit 70    ;; Make sure stuff like timers show up in half-screen setups
        doom-modeline-project-detection 'ffip) ;; use ffip
  (doom-modeline-mode 1))
#+end_src

** Minor tweaks
Some miscellaneous tweaks and one-liners that don't necessarily warrant their own sections
#+begin_src elisp
;; Show a custom title bar text
;; (setq frame-title-format '(multiple-frames "%b" ("" "%b - Wyrd Emacs")))

(setq frame-title-format
      '(:eval (if-let ((project (project-current)))
                  (format "Project: %s - Wyrd Emacs" (project-name project))
                "%b - Wyrd Emacs")))

(global-visual-line-mode t)           ;; Enable visual line mode globally
(setq ring-bell-function 'ignore)     ;; Disable bell sound
(fringe-mode 0)                       ;; Disable fringes globally
(global-display-line-numbers-mode -1) ;; Disable line numbers
#+end_src

* Dashboard
Dashboard is the first thing you see when you start Emacs. I'll include some recent files, agenda for the day, as well as a nice little startup image, just to make things nice and personal.

Dashboard has some problems when running on daemonized Emacs. So we'll set ~initial-buffer-choice~ to "*dashboard*" and also make the daemon immediately refresh the buffer whenever it creates a new frame (otherwise dashboard icons are not visible).

#+begin_src elisp 
(use-package dashboard
  :ensure t
  :after nerd-icons
  :init
  (setq dashboard-icon-type 'nerd-icons
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-banner-logo-title "Welcome back, Jarizleifr!"
        dashboard-startup-banner "~/.emacs.d/splash2.txt"
        dashboard-projects-backend 'project-el
        dashboard-items '((projects  . 5)
                          (bookmarks . 5)
                          (recents   . 5)
                          (agenda    . 5)))
  ;; Initial buffer setup when using Emacs daemon
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  (add-hook 'server-after-make-frame-hook 'revert-buffer)
  :config
  (dashboard-setup-startup-hook))
#+end_src

* Files
** Dired
Dired is the Emacs directory explorer. In general, it's better to use fuzzy find and searches to get what you're looking for, but sometimes it's useful to get a clear view of the directory structure.
#+begin_src elisp
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :hook (dired-mode . (lambda () (dired-hide-details-mode 1)))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer)
  :custom ((dired-listing-switches "-aghov --group-directories-first"))
  :general
  (nvmap :prefix "SPC"
    "d d" '(dired :which-key "Dired")
    "d j" '(dired-jump :which-key "Dired Jump")))
#+end_src

** Encryption
#+begin_src elisp
(epa-file-enable)
#+end_src

** Backups, Auto-Save
Emacs clutters folders quite profusely with backup and temp files, this'll stuff all backup and autosave data to .emacs.d instead.

#+begin_src elisp
(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

;; auto-save-mode doesn't create the path automatically!
(make-directory (expand-file-name "tmp/autosaves/" user-emacs-directory) t)
(setq auto-save-list-file-prefix
  (expand-file-name "tmp/autosaves/sessions/" user-emacs-directory)
    auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/autosaves/" user-emacs-directory) t)))
#+end_src

* Org-mode
Org-mode is pretty much the number one reason for why I use Emacs in the first place. It provides great facilities for note taking, journaling, visualizing data and doing all sorts of other interesting stuff like TODO tracking, scheduling and organizational tasks.

- ~org-habit~ :: I use habit tracking extensively for training and weightlifting, showing what exercises I have done and at what intervals.
- ~org-tempo~ :: Generates structured templates. For example, ~<s + TAB~ creates a source block.

#+begin_src elisp
(require 'org-habit) ;; org-habit is a built-in module, but it needs to be "required" before we can use it
(use-package org
  :init
  ;; Org modules need to be set before loading
  (setq org-modules '(org-habit org-tempo))
  :config
  (setq org-cycle-separator-lines 1
        org-archive-subtree-save-file-p nil
        org-directory "~/Dropbox/Journal"
        org-log-into-drawer t
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-startup-indented t
        org-hidden-keywords '(author date email title)
        ;; org-agenda
        org-agenda-window-setup 'current-window
        org-agenda-files (list (expand-file-name "journal.org" org-directory)
                               (expand-file-name "habits.org"  org-directory)
                               (expand-file-name "work.org"    org-directory))
        ;; Org source block config
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-src-window-setup 'current-window
        org-src-preserve-indentation t
        ;; timer sound (32-bit float didn't work, 16-bit signed PCM did work)
        org-clock-sound (expand-file-name "alarm.wav" user-emacs-directory))
  ;; Setup org-habit
  (setq org-habit-graph-column 65
        org-habit-show-habits-only-for-today nil
        org-habit-show-all-today t
        org-habit-today-glyph ?‖
        org-habit-completed-glyph ?✓)
  :hook
  ((org-mode) . variable-pitch-mode)
  :general
  (nvmap 'org-mode-map
    "g j" 'evil-next-visual-line
    "g k" 'evil-previous-visual-line)
  (nvmap :prefix "SPC"
    "o a" '(org-agenda :which-key "Open org agenda")
    "o c" '(org-capture :which-key "Capture org note")
    "t w" '((lambda () (interactive) (org-timer-set-timer 50)) :which-key "Set timer to WORK (50 min)") 
    "t b" '((lambda () (interactive) (org-timer-set-timer 10)) :which-key "Set timer to BREAK (10 min)") 
    "t p" '(org-timer-pause-or-continue :which-key "Pause or continue timer")))
#+end_src

** Org-roam
#+begin_src elisp
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-directory (file-truename "~/Dropbox/Roam"))
  :general
  (nvmap :prefix "SPC"
    "n f" '(org-roam-node-find :which-key "Find org-roam Node")
    "n n" '(org-roam-node-insert :which-key "Insert org-roam Node")
    "n c" '(org-roam-node-insert :which-key "Capture org-roam Node"))
  :config
  (org-roam-db-sync))
#+end_src

** Org-journal
Setup directories and other general configuration and load up org-habit module.

#+begin_src elisp
(use-package org-journal
  :ensure t
  :config
  (setq org-journal-dir "~/Dropbox/Journal/Journal"
        org-journal-file-type 'weekly
        org-journal-date-format "%B %d, %Y (%A)"
        org-journal-file-format "%Y-%m-%d.org")
  :general
  (nvmap :prefix "SPC"
    "o j j" '(org-journal-open-current-journal-file :which-key "Open current journal file")
    "o j n" '(org-journal-new-entry :which-key "New journal entry")))
#+end_src

* Programming
** Git integration (Magit)
#+begin_src elisp 
(use-package magit
  :ensure t
  :config
  (nvmap :prefix "SPC"
    "m" '(magit :which-key "Magit")))
#+end_src

** Rest client
#+begin_src elisp 
(use-package restclient :ensure t)
#+end_src

** Formatting
#+begin_src elisp
  (use-package editorconfig
  :ensure t
  :config (editorconfig-mode 1))
#+end_src

** Advanced language support
*** Tree-sitter
#+begin_src elisp
(use-package tree-sitter
  :ensure t
  :hook
  ((c-mode) . tree-sitter-mode)
  ((c-mode) . tree-sitter-hl-mode))
(use-package tree-sitter-langs :ensure t)
#+end_src
*** Lua
#+begin_src elisp
(use-package lua-mode :ensure t)
#+end_src
*** TypeScript
#+begin_src elisp
(use-package flymake-eslint :ensure t)
(use-package eslint-fix :ensure t)
(use-package eslintd-fix :ensure t)
(use-package typescript-mode
  :ensure t
  :mode "\\.ts\\'"
  :config
  (add-hook 'typescript-mode-hook (lambda () (flymake-eslint-enable)))
  :general
  (nvmap :keymaps 'typescript-mode-map :prefix "SPC"
    "f f" '(eslint-fix :which-key "Format buffer")))
#+end_src
*** Web languages (HTML/CSS/React)
~web-mode~ is a somewhat fickle beast, especially when combined with React and TypeScript. Usually TypeScript React projects will use ~eglot~ for general IntelliSense, but ~eslint~ for formatting and error checking.

#+begin_src elisp
(use-package web-mode
  :ensure t
  :mode (("\\.js\\'" . web-mode)
         ("\\.tsx\\'" . typescript-react-mode))
  :init
  (define-derived-mode typescript-react-mode web-mode "React TypeScript")
  :config
  (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))
  (add-hook 'typescript-react-mode-hook (lambda () (flymake-eslint-enable)))
  :general
  (nvmap :keymaps 'typescript-react-mode-map :prefix "SPC"
    "f f" '(eslint-fix :which-key "Format buffer")))
#+end_src
*** JSON
#+begin_src elisp
(use-package json-mode
  :ensure t
  :general
  (nvmap :keymaps 'json-mode-map :prefix "SPC"
    "f f" '(json-pretty-print-buffer :which-key "Format buffer")))
#+end_src
*** Nim
#+begin_src elisp
(use-package nim-mode
  :ensure t)
#+end_src
*** Zig
#+begin_src elisp
(use-package zig-mode
  :ensure t)
#+end_src
*** Rust
#+begin_src elisp
(use-package rust-mode :ensure t)
#+end_src
*** Meson
#+begin_src elisp
(add-to-list 'auto-mode-alist '("/meson.build\\'" . python-mode))
#+end_src
*** C/C++
#+begin_src elisp
(add-hook 'c-mode-hook (lambda ()
                         (set-fill-column 80)
                         (display-fill-column-indicator-mode)))
;; Add support for preferred ~.cc~ files
(add-to-list 'auto-mode-alist '("\\.cc\\'" . c++-mode))
#+end_src
*** Lisps
All Lisps benefit from a selection of packages, as they share same structure.

- ~rainbow-delimiters~ :: Assigns colors to parens depending on nesting depth. Great for visualizing where things start and where they end.
- ~smartparens~ :: Improves handling of parens pairs and there are a LOT of parens with Lisps.
- ~aggressive-indent~ :: Indents code depending on its immediate surroundings. In general, this makes things much more readable.

#+begin_src elisp
(use-package rainbow-delimiters
  :ensure t
  :hook ((emacs-lisp-mode fennel-mode lisp-mode) . rainbow-delimiters-mode))
(use-package smartparens
  :ensure t
  :hook ((emacs-lisp-mode fennel-mode lisp-mode) . smartparens-mode))
(use-package aggressive-indent
  :ensure t
  :hook ((emacs-lisp-mode fennel-mode lisp-mode) . aggressive-indent-mode))

;; Remove indents from elisp
(add-hook 'emacs-lisp-mode-hook (lambda () (setq indent-tabs-mode nil)))

(use-package sly :ensure t)

;; (defun jzlfr/set-directory-at-fennel-rc ()
;;   (interactive)
;;   (setq default-directory
;; 	(expand-file-name
;; 	 (concat
;; 	  (file-name-directory (locate-dominating-file
;; 				default-directory ".fennelrc"))
;; 	  "fennel"))))
;; 	      (interactive)
;; 	      (jzlfr/set-directory-at-fennel-rc)
;; 	      (fennel-proto-repl-switch-to-repl))

(use-package fennel-mode
  :ensure t
  :commands fennel-proto-repl
  :hook (fennel-mode . fennel-proto-repl-minor-mode)
  :config
  ;; Since even lisp-mode sets things like 'defvar 'defconst to 'defun, this results in
  ;; somewhat more familiar indentation
  (put 'var 'fennel-indent-function 'defun)
  (put 'local 'fennel-indent-function 'defun)
  (put 'global 'fennel-indent-function 'defun)
  :general
  (nvmap :keymaps 'fennel-proto-repl-mode-map
    "g z"     '(fennel-proto-repl-switch-to-repl :which-key "Switch to Fennel code")
    "SPC z c" '(fennel-proto-repl-clear-buffer :which-key "Clear Fennel REPL buffer"))
  (nvmap :keymaps 'fennel-mode-map
    "g z" '(fennel-proto-repl-switch-to-repl :which-key "Switch to Fennel REPL"))
  (nvmap :keymaps 'fennel-mode-map :prefix "SPC"
    "v" '((lambda () (interactive)
	    (fennel-proto-repl-show-var-documentation (thing-at-point 'symbol)))
	  :which-key "Show variable documentation")
    "e e" '(fennel-proto-repl-eval-buffer :which-key "Evaluate Fennel buffer")
    "e r" '(fennel-proto-repl-eval-region :which-key "Evaluate Fennel region")
    "e d" '(fennel-proto-repl-eval-defun :which-key "Evaluate Fennel defun")
    "l"   '(fennel-proto-repl-link-buffer :which-key "Link Fennel buffer to REPL")))
    #+end_src
*** Language Server Protocol (Eglot)
Eglot is a language server protocol client, which can provide all sorts of IDE-like functionality to Emacs, like symbol renaming, formatting and applying code actions. Here we map different programming modes to language servers to use.

#+begin_src elisp
(use-package eglot
  :ensure t
  :hook
  ((csharp-mode typescript-mode typescript-react-mode c-mode c++-mode zig-mode lua-mode nim-mode) . eglot-ensure)
  ((csharp-mode typescript-mode typescript-react-mode) . (lambda () (add-hook 'before-save-hook 'eglot-format nil 'local)))
  :config
  ;; We want to stop eglot from managing flymake, since we use flymake-eslint for TypeScript/React projects
  ;; (setq eglot-stay-out-of '(flymake))
  ;; (add-hook 'eglot--managed-mode-hook
  ;; 	    (lambda () (add-hook 'flymake-diagnostic-functions 'eglot-flymake-backend nil t)))

  ;; Disable inlay hints by default as it breaks line widths. Enable it with "SPC e i", if needed
  (add-hook 'eglot-managed-mode-hook (lambda () (eglot-inlay-hints-mode -1)))
  (setq eglot-server-programs
        (append eglot-server-programs
                '((c-mode . ("clangd"))
                  (c++-mode . ("clangd"))
                  (fennel-mode . ("fennel-ls" :initializationOptions
                                  (:fennel-ls (:fennel-path "./fennel/?.fnl;./fennel/?/?.fnl"
                                               :macro-path "./fennel/macros.fnl;macros.fnl;./macros.fnl;../macros.fnl"))))
                  (zig-mode . ("zls"))
                  (nim-mode . ("nimlsp"))
                  (rust-mode . ("rust-analyzer"))
                  (csharp-mode . ("omnisharp" "-lsp"))
                  (lua-mode . ("lua-language-server"))
                  (typescript-mode . ("typescript-language-server" "--stdio"))
                  (typescript-react-mode . ("typescript-language-server" "--stdio")))))
  :general
  (nvmap :keywords 'eglot-mode-map :prefix "SPC"
    "e f" '(eglot-format :which-key "Eglot format")
    "e q" '(eglot-code-action-quickfix :which-key "Eglot quick fix")
    "e a" '(eglot-code-actions :which-key "Eglot code actions")
    "e o" '(eglot-code-action-organize-imports :which-key "Eglot organize imports")
    "e r" '(eglot-rename :which-key "Eglot rename")
    "e i" '(eglot-inlay-hints-mode :which-key "Eglot toggle inlay hints")))
#+end_src

** Programming helpers
*** Smart dash
#+begin_src elisp
(use-package smart-dash
  :ensure t)
#+end_src
*** Eldoc
#+begin_src elisp
(use-package eldoc-box
  :ensure t
  :config
  (setq eldoc-idle-delay 0.2)                ;; Shorten eldoc delay 0.5s -> 0.2s
  (setq eldoc-echo-area-use-multiline-p nil) ;; Eldoc should only show one line of echo area, ever
  :general
  (nvmap :keymaps 'override
    "g h" '(eldoc-box-help-at-point :which-key "Show Eldoc at-point")))
#+end_src

*** Keybindings
#+begin_src elisp
(nvmap :prefix "SPC"
  ";"   '(comment-line :which-key "Comment line")
  "'"   '(comment-indent :which-key "Add comment"))
#+end_src

*** YASnippet
~yasnippet~ lets you configure your own custom snippets, so you don't need to write boilerplate code.
#+begin_src elisp
(use-package yasnippet
  :ensure t
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  (yas-global-mode 1))
#+end_src

*** Company-mode
~company~ is an at-point text completion framework, which will give symbol suggestions as you write code. ~company~ doesn't play nice with ~yasnippet~ out of the box, so we'll need to give it a little help.

#+begin_src elisp
(defun company-yasnippet-or-completion ()
  (interactive)
  (let ((yas-fallback-behavior nil))
    (unless (yas-expand)
      (call-interactively #'company-complete-common))))

(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0
	      company-minimum-prefix-length 1)
  (add-hook 'company-mode-hook (lambda ()
                                 (substitute-key-definition 'company-complete-common
                                                            'company-yasnippet-or-completion
                                                            company-active-map)))
  :hook
  ((csharp-mode
    fennel-mode
    rust-mode
    zig-mode
    c-mode
    c++-mode
    lua-mode
    typescript-mode
    typescript-react-mode)
   . company-mode))
#+end_src
