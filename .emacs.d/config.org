* Jarizleifr's Emacs Config
* Todo
** TODO Elfeed keybindings
- open with SPC E
- how to filter via tags?
** TODO Email?
- the more I can do with Emacs the better?
** TODO Projectile keybindings
- open bookmarked project
- fuzzy find files within project
** TODO Column numbers 
** TODO Rainbow delimiters
* Initial setup
** Package management
*** Setup package.el and MELPA
#+begin_src elisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-refresh-contents)
(package-initialize)
#+end_src
*** Setup use-package 
#+begin_src elisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-always-ensure t)
#+end_src
** Evil Mode
#+begin_src elisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (evil-mode))
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired bookmark ibuffer elfeed magit))
  (evil-collection-init))
(use-package evil-tutor)
#+end_src
* General keybindings
** Setup general.el
#+begin_src elisp
(use-package general
  :config
  (general-evil-setup t))
#+end_src
** Setup which-key.el
Minibuffer seems to work just fine out of the box.
#+begin_src elisp
(use-package which-key
  :init
  (which-key-setup-minibuffer))
(which-key-mode)
#+end_src
** Keybindings 
#+begin_src elisp 
;; General
(nvmap :states 'normal :keymaps 'override :prefix "SPC"
       "SPC"   '(helm-M-x :which-key "M-x"))
;; Buffers and bookmarks
(nvmap :states 'normal :keymaps 'override :prefix "SPC"
       "b"     '(bookmark-bmenu-list :which-key "Open bookmarks"))
;; File
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
       "."     '(find-file :which-key "Find file"))
;; Reload
(nvmap :states '(normal) :keymaps 'override :prefix "SPC"
       "r" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload Emacs config"))
#+end_src
* Theme
** Use Fira Code font 
#+begin_src elisp
(set-face-attribute 'default t 
  :font "Fira Code Regular-9")
(add-to-list 'default-frame-alist '(font . "Fira Code Regular-9" )) ; Needed for emacsclient
#+end_src
** Use Dracula theme
#+begin_src elisp
(add-hook 'after-init-hook (lambda () 
  (load-theme 'dracula t)))
(setq dracula-enlarge-headings nil)
#+end_src
*** Extra colors for Evil mode states
#+begin_src elisp
(setq evil-normal-state-cursor '(box "#F8F8F2")
      evil-insert-state-cursor '(box "#50FA7B")
      evil-visual-state-cursor '(box "#FFB86C"))
#+end_src
*** All the icons
#+begin_src elisp
(use-package all-the-icons)
#+end_src
*** Doom modeline
#+begin_src elisp 
(use-package doom-modeline
  :init (doom-modeline-mode 1))
#+end_src
* Dashboard
** Setup Dashboard
#+begin_src elisp 
(use-package dashboard
  :init
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Welcome back, Jarizleifr!")
  (setq dashboard-startup-banner "~/.emacs.d/splash.png")
  (setq dashboard-items '((recents . 7)
                          (agenda  . 7)))
  :config
  (dashboard-setup-startup-hook))
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src
* Files
** Dired & buffers
#+begin_src elisp
(use-package all-the-icons-dired)
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :config

  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-up-directory
    "l" 'dired-find-file))

(nvmap :keymaps 'override :prefix "SPC"
       "d d"   '(dired :which-key "Open dired")
       "d j"   '(dired-jump :which-key "Open dired in current file path")
       "i"     '(ibuffer :which-key "Open ibuffer")
)
#+end_src
** Backups, Auto-Save
- Emacs clutters folders quite profusely, this'll stuff all backup and autosave data to .emacs.d instead.
#+begin_src elisp
(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

;; auto-save-mode doesn't create the path automatically!
(make-directory (expand-file-name "tmp/autosaves/" user-emacs-directory) t)
(setq auto-save-list-file-prefix
  (expand-file-name "tmp/autosaves/sessions/" user-emacs-directory)
    auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/autosaves/" user-emacs-directory) t)))
#+end_src
* Project Management
** Projectile and Helm
#+begin_src elisp
(use-package helm)
(use-package projectile)
(projectile-global-mode)
(setq projectile-completion-system 'helm)
(setq projectile-indexing-method 'alien)
(use-package helm-projectile)
(helm-projectile-on)
#+end_src
* GUI Tweaks
** Disable Menubar and Toolbar 
#+begin_src elisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src
** Display Line Numbers and Truncated Lines
#+begin_src elisp 
(global-display-line-numbers-mode)
(global-visual-line-mode t)
#+end_src
** Disable Bell Sound
#+begin_src elisp
(setq ring-bell-function 'ignore)
#+end_src
* ORG Mode
** General config
#+begin_src elisp
(use-package org-journal)
(setq org-directory "F:/Dropbox/Journal/"
      org-default-notes-file (expand-file-name "notes.org" org-directory)
      org-journal-dir "F:/Dropbox/Journal/Journal"
      org-journal-file-type 'weekly
      org-journal-date-format "%B %d, %Y (%A)"
      org-journal-file-format "%Y-%m-%d.org"
      org-log-into-drawer t
)
(setq org-archive-subtree-save-file-p nil)
(with-eval-after-load 'org
  (add-to-list 'org-modules 'org-habit t)
)
#+end_src
**  Habit tracking
*** TODO Fix habit graph showing for all days 
#+begin_src elisp
(setq org-habit-graph-column 65)
(setq org-habit-show-habits-only-for-today nil)
(setq org-habit-show-all-today t)
(use-package org-habit
  :ensure nil)
(use-package org-tempo
  :ensure nil)
(setq org-modules '(org-tempo org-habit))
#+end_src   
** Agenda
- Setup files included in agenda
- Make agenda always use the current window, so the workflow is same with dired
#+begin_src elisp
(setq org-agenda-files (list (expand-file-name "journal.org" org-directory)
                             (expand-file-name "habits.org"  org-directory)
                             (expand-file-name "work.org"    org-directory)))
(setq org-agenda-window-setup 'current-window)
#+end_src
** Org keybindings
#+begin_src elisp
(nvmap :keymaps 'override :prefix "SPC"
       "o a"    '(org-agenda :which-key "Open org agenda")
       "o j j"  '(org-journal-open-current-journal-file :which-key "Open current journal file")
       "o j n"  '(org-journal-new-entry :which-key "New journal entry")
       "o c"    '(org-capture :which-key "Capture org note")
       "t w"    '((lambda () (interactive) (org-timer-set-timer 50)) :which-key "Set timer to WORK (50 min)") 
       "t b"    '((lambda () (interactive) (org-timer-set-timer 10)) :which-key "Set timer to BREAK (10 min)") 
       "t p"    '(org-timer-pause-or-continue :which-key "Pause or continue timer"))
#+end_src
** Source Code Block Syntax Highlighting
#+begin_src elisp
(setq org-src-fontify-natively t
      org-src-tabs-acts-natively t
      org-src-preserve-indentation t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)
#+end_src
* RSS Feeds
#+begin_src elisp
(use-package elfeed
  :config
  (setq elfeed-feeds (quote (
       ("https://feeds.yle.fi/uutiset/v1/majorHeadlines/YLE_UUTISET.rss" news)
       ("https://en.wikipedia.org/w/api.php?action=featuredfeed&feed=featured&feedformat=rss" wikipedia)))))
(nvmap :keymaps 'override :prefix "SPC"
       "e"      '(elfeed :which-key "Open elfeed"))
(setq elfeed-show-mode-hook
      (lambda ()
	(set-face-attribute 'variable-pitch (selected-frame) :font "Tahoma-12")))
#+end_src
* Shell
Set shell to use cmder settings
#+begin_src elisp
(setq explicit-shell-file-name (substitute-in-file-name "$SYSTEMROOT/System32/cmd.exe")) 
(setq shell-file-name "cmd")
(setq explicit-cmd.exe-args '("/k %ConEmuDir%/../init.bat"))
#+end_src
* Git integration
#+begin_src elisp 
(use-package magit)
(nvmap :keymaps 'override :prefix "SPC"
  "m"    '(magit :which-key "Open magit"))
#+end_src
* Language support
#+begin_src elisp
(use-package lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c l")
  :hook ((csharp-mode . lsp)
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)
(use-package csharp-mode)

(use-package company
  :ensure t
  :config
  ;; Optionally enable completion-as-you-type behavior.
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 1))
#+end_src

* Editor config for languages
#+begin_src elisp
(use-package editorconfig
  :config (editorconfig-mode 1))

(defun jzlfr-csharp-mode-hook ()
  (electric-pair-local-mode 1))

(add-hook 'csharp-mode-hook 'jzlfr-csharp-mode-hook)
#+end_src
