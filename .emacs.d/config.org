#+TITLE:Jarizleifr's Emacs Config
* Initial setup
** Package management
Most packages come from MELPA package repository, so the first thing is to plug our Emacs into there.

*** Setup package.el and MELPA
#+begin_src elisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-refresh-contents)
(package-initialize)
#+end_src

*** Setup use-package 
Once we have access to MELPA, we need use-package, which will greatly simplify package management and configuration.

The config is set to always install use-package if its missing.

#+begin_src elisp
(unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
#+end_src

* Commands
** Evil-mode
Evil mode provides Vim-keybindings for Emacs, making it immediately feel much more familiar.

#+begin_src elisp
(use-package evil
  :ensure t
  ;; Setup evil-mode in init, as these options change how package is loaded.
  :init
  (setq evil-want-C-i-jump nil
	    evil-undo-system 'undo-redo
        evil-want-integration t
	    evil-want-keybinding nil
        evil-vsplit-window-right t
        evil-split-window-below t)
  (evil-mode))
#+end_src

** Evil-collection
Evil collection provides some extra keybindings for other plugins, making everything feel more consistent with evil-mode.

#+begin_src elisp
(use-package evil-collection
  :ensure t
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard helm dired bookmark ibuffer magit xref))
  (evil-collection-init))
#+end_src

** General
General provides a nice way to configure ~evil~-compatible keybindings with a ~:general~ keyword and mapping functions like ~imap~, ~nvmap~, representing the different evil states where the bindings are active.

Also, bind ~ö~ to Vim ex commands and ~ä~ to forward search while in normal mode, as I'm using a FI keyboard layout, and these small changes makes saving and searching much more convenient.

#+begin_src elisp
(use-package general
  :ensure t
  :config
  (general-evil-setup t))
(general-def 'normal "ö" 'evil-ex)
(general-def 'normal "ä" 'evil-search-forward)
#+end_src

** Which key
~which-key~ can be used to grant descriptions to custom keybindings, which are then shown whenever looking for commands, improving discoverability.

#+begin_src elisp
(use-package which-key
  :ensure t
  :init
  (which-key-setup-minibuffer))
(which-key-mode)
#+end_src

** Helm
Helm is a framework for incremental completions and narrowing down selections. It is at the very heart of everything that happens in Emacs, we can use it to do selections on anything that can be represented as a list, like commands, buffers, bookmarks and files.

#+begin_src elisp
(use-package helm
  :ensure t
  :hook ((helm-major-mode-hook . (lambda () (setq auto-composition-mode nil))))
  :general
  (nvmap :keymaps 'override :prefix "SPC"
         "SPC"   '(helm-M-x :which-key "Command")
         "b"     '(helm-buffers-list :which-key "Buffers")
         "s"     '(helm-bookmarks :which-key "Bookmarks")
         "."     '(helm-find-files :which-key "Find files")))
#+end_src

* Global controls 
There are few keybindings that don't relate to any of the packages, so we'll keep them here as a separate section.

#+begin_src elisp 
(nvmap :prefix "SPC"
       "r"     '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload emacs config"))
;; Increase/decrease text size with a keyboard command
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src 

** Disable far keys
I tend to use arrow keys and home/end/del/pgup/pgdn as a crutch and I want to learn out of this behavior. So we'll disable the offending keys and display a message instead.
#+begin_src elisp
(defun vi-keys-notification ()
  (interactive)
  (message "Use HJKL to move cursor"))
(general-def '(normal visual insert) "<up>" 'vi-keys-notification)
(general-def '(normal visual insert) "<down>" 'vi-keys-notification)
(general-def '(normal visual insert) "<left>" 'vi-keys-notification)
(general-def '(normal visual insert) "<right>" 'vi-keys-notification)

(general-def '(normal visual insert) "<deletechar>" (lambda () (interactive) (message "Use x to delete character")))
(general-def '(normal visual insert) "<insert>" (lambda () (interactive) (message "Use i to insert character")))
(general-def '(normal visual insert) "<home>" (lambda () (interactive) (message "Use 0 or ^ (S-4) to return cursor")))
(general-def '(normal visual insert) "<end>" (lambda () (interactive) (message "Use $ (M-4) to move cursor to the end")))
(general-def '(normal visual insert) "<prior>" (lambda () (interactive) (message "Use (C-B) to go backwards")))
(general-def '(normal visual insert) "<next>" (lambda () (interactive) (message "Use (C-F) to go forwards")))
#+end_src

* Theming
** Base16
I use the Base16 theme system, with a custom theme, designed by yours truly. Base16 doesn't by default have colors for evil-mode state cursors, so let's add some simple overrides. We get the colors dynamically from the current theme variable set in previous block, so this works nicely even if you want to change themes.

#+begin_src elisp
(use-package base16-theme
  :ensure t
  :init
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  :config
  (load-theme 'base16-skeletor t))

(defvar skeletor-colors base16-skeletor-colors)
(setq evil-emacs-state-cursor   `(,(plist-get skeletor-colors :base0D) box)
      evil-insert-state-cursor  `(,(plist-get skeletor-colors :base0D) bar)
      evil-motion-state-cursor  `(,(plist-get skeletor-colors :base0E) box)
      evil-normal-state-cursor  `(,(plist-get skeletor-colors :base0B) box)
      evil-replace-state-cursor `(,(plist-get skeletor-colors :base08) bar)
      evil-visual-state-cursor  `(,(plist-get skeletor-colors :base09) box))
#+end_src

** Setup fonts
Use Fira Code as the default and monospaced font, use Garamond for variable pitch mode, for example in org-mode.

#+begin_src elisp
(add-to-list 'default-frame-alist '(font . "Fira Code Regular-12" )) ; Needed for emacsclient
(set-face-attribute 'default nil :font "Fira Code Regular-12")
(set-face-attribute 'fixed-pitch nil :family "Fira Code" :height 0.6)
(set-face-attribute 'variable-pitch nil :font "EB Garamond-16")
#+end_src

*** Org-mode styling
Org-mode is my main authoring tool whenever I'm not writing code, so I want it to be as pleasant to look at and read as possible. Make sure Org-mode always uses a variable-pitch font, as well as make the headlines stand out more. Also, remove line numbers on org-mode buffers, as they're really not needed there.

#+begin_src elisp
(set-face-attribute 'org-document-title nil :height 1.5 :weight 'bold :foreground (plist-get skeletor-colors :base0E))
(set-face-attribute 'org-level-1 nil :height 1.4 :weight 'bold :foreground (plist-get skeletor-colors :base0E))
(set-face-attribute 'org-level-2 nil :height 1.2 :weight 'bold :foreground (plist-get skeletor-colors :base0E))
(set-face-attribute 'org-level-3 nil :height 1.1 :weight 'bold :foreground (plist-get skeletor-colors :base0E))
(set-face-attribute 'org-level-4 nil :height 1.0 :weight 'bold :foreground (plist-get skeletor-colors :base0E))

(set-face-attribute 'org-block nil :inherit 'fixed-pitch)
(set-face-attribute 'org-block-begin-line nil :inherit 'fixed-pitch)
(set-face-attribute 'org-block-end-line nil :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil :inherit 'fixed-pitch)
(set-face-attribute 'org-document-info-keyword nil :inherit 'fixed-pitch)
(set-face-attribute 'org-meta-line nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil :inherit 'fixed-pitch)
(set-face-attribute 'org-verbatim nil :inherit 'fixed-pitch)
(set-face-attribute 'org-drawer nil :inherit 'fixed-pitch)
(set-face-attribute 'org-special-keyword nil :inherit 'fixed-pitch)
(set-face-attribute 'org-tag nil :inherit 'fixed-pitch)
(set-face-attribute 'org-hide nil :inherit 'fixed-pitch)

(setq org-hidden-keywords (quote (author date email title)))

(add-hook 'org-mode-hook 'variable-pitch-mode)
(add-hook 'org-mode-hook 'org-indent-mode)
;; This doesn't work
(add-hook 'org-mode-hook (lambda () (display-line-numbers-mode -1)))
#+end_src 
 
** Modeline
Include Doom Emacs modeline (status bar), which looks nice. Doom modeline requires the all-the-icons package, so make sure it's installed as well.

#+begin_src elisp 
(use-package all-the-icons
  :ensure t)
(use-package all-the-icons-dired
  :ensure t
  :after all-the-icons
  :config
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
(use-package doom-modeline
  :ensure t
  :init
  (doom-modeline-mode 1))
#+end_src

** GUI tweaks
Some miscellaneous tweaks and one-liners that don't necessarily warrant their own sections
#+begin_src elisp
(global-display-line-numbers-mode)
(global-visual-line-mode t)
(setq ring-bell-function 'ignore)
#+end_src

* Dashboard
Dashboard is the first thing you see when you start Emacs. I'll include some recent files, agenda for the day, as well as a nice little startup image, just to make things nice and personal.

#+begin_src elisp 
(use-package dashboard
  :ensure t
  :init
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Welcome back, Jarizleifr!")
  (setq dashboard-startup-banner "~/.emacs.d/splash.png")
  (setq dashboard-items '((projects  . 5)
			   (bookmarks . 5)
			   (recents   . 5)
                         (agenda    . 5)))
  :config
  (dashboard-setup-startup-hook))
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

* Files
** Dired
Dired is the Emacs directory explorer. In general, it's better to use fuzzy find and searches to get what you're looking for, but sometimes it's useful to get a clear view of the directory structure.
#+begin_src elisp
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :hook (dired-mode . (lambda () (dired-hide-details-mode 1)))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer)
  :custom ((dired-listing-switches "-agho --group-directories-first"))
  :general
  (nvmap :prefix "SPC"
         "d d"   '(dired :which-key "Dired")
         "d j"   '(dired-jump :which-key "Dired Jump")))
#+end_src

** Backups, Auto-Save
Emacs clutters folders quite profusely with backup and temp files, this'll stuff all backup and autosave data to .emacs.d instead.

#+begin_src elisp
(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

;; auto-save-mode doesn't create the path automatically!
(make-directory (expand-file-name "tmp/autosaves/" user-emacs-directory) t)
(setq auto-save-list-file-prefix
  (expand-file-name "tmp/autosaves/sessions/" user-emacs-directory)
    auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/autosaves/" user-emacs-directory) t)))
#+end_src

* Project management
** Projectile
Projectile is a project interaction library, which makes dealing with complex projects a breeze. One can for example build, run and test projects by providing a configuration. I'm using Helm as my finder, so helm-projectile is setup here as well, which provides some glue between the two libraries.

#+begin_src elisp
(defun jzlfr/projectile-project-find-function (dir)
  (let ((root (projectile-project-root dir)))
    (and root (cons 'transient root))))

(use-package projectile
  :ensure t
  :config
  (setq projectile-completion-system 'helm
        projectile-indexing-method 'alien
	  ;; projectile's find files functionality is broken on windows, when project includes git submodules
	  ;; workaround until this is fixed https://github.com/bbatsov/projectile/pull/1764
	  projectile-git-submodule-command nil)
  (add-to-list 'projectile-other-file-alist '("xsd" "xml"))
  (add-to-list 'projectile-other-file-alist '("xml" "xsd"))
  (projectile-global-mode)
  ;; Make projectile variables in .dir-locals.el safe
  (put 'projectile-test-suffix-function 'safe-local-variable #'functionp)
  ;;(with-eval-after-load 'project
  ;;  (add-to-list 'project-find-functions 'jzlfr/projectile-project-find-function))
  :bind
  (("<f5>" . projectile-run-project)
   ("<f6>" . projectile-test-project)
   ("<f8>" . projectile-compile-project))
  :general
  (nvmap :prefix "SPC"
         "p p"   '(projectile-find-file :which-key "Find files in project")
         "p f"   '(helm-projectile-ag :which-key "Search in project")
         "p t"   '(projectile-toggle-between-implementation-and-test :which-key "Toggle between implementation and test")))
(use-package helm-projectile
  :ensure t
  :config
  (helm-projectile-on))
#+end_src
** File search
#+begin_src elisp
(use-package helm-ag :ensure t)
#+end_src
* Org-mode
Org-mode is pretty much the number one reason for why I use Emacs in the first place.

#+begin_src elisp
(use-package org
  :config
  (setq org-cycle-separator-lines 1
	 org-archive-subtree-save-file-p nil
	 org-directory "F:/Dropbox/Journal/"
	 org-log-into-drawer t
        org-default-notes-file (expand-file-name "notes.org" org-directory)

	 org-indent-mode 1
	 org-hide-leading-stars t
	
	 ;; org-agenda
       org-agenda-window-setup 'current-window
	 org-agenda-files (list (expand-file-name "journal.org" org-directory)
                               (expand-file-name "habits.org"  org-directory)
                               (expand-file-name "work.org"    org-directory))

	 ;; Org source block config
	 org-src-fontify-natively t
       org-src-tabs-acts-natively t
       org-src-preserve-indentation t
       org-edit-src-content-indentation 0

	 ;; Org modules
       org-modules '(org-habit org-tempo)

	 ;; org-habit 
	 org-habit-graph-column 65
       org-habit-show-habits-only-for-today nil
       org-habit-show-all-today t)
  :general
  (nvmap :prefix "SPC"
         "o a"   '(org-agenda :which-key "Open org agenda")
         "o c"   '(org-capture :which-key "Capture org note")
         "t w"   '((lambda () (interactive) (org-timer-set-timer 50)) :which-key "Set timer to WORK (50 min)") 
         "t b"   '((lambda () (interactive) (org-timer-set-timer 10)) :which-key "Set timer to BREAK (10 min)") 
         "t p"   '(org-timer-pause-or-continue :which-key "Pause or continue timer")))
#+end_src

** Org-journal
Setup directories and other general configuration and load up org-habit module.

#+begin_src elisp
(use-package org-journal
  :ensure t
  :config
  (setq org-journal-dir "F:/Dropbox/Journal/Journal"
   	  org-journal-file-type 'weekly
	  org-journal-date-format "%B %d, %Y (%A)"
	  org-journal-file-format "%Y-%m-%d.org")
  :general
  (nvmap :prefix "SPC"
         "o j j" '(org-journal-open-current-journal-file :which-key "Open current journal file")
         "o j n" '(org-journal-new-entry :which-key "New journal entry")))
#+end_src

** Exporting
#+begin_src elisp
(use-package htmlize :ensure t)
(require 'ox)
(require 'ox-html)
#+end_src

* Extended shell commands
Some functionality (like ~projectile~'s find commands) requires unix commands, which while can be installed on Windows, are usually overridden by Windows-specific commands. Here we add GNU findutils added by ~Scoop~ to the front of the ~PATH~ environment variable, to make sure that we default to our installed tools, instead of Windows tools.

My first idea was to put the entire shims folder in front of the ~PATH~, but that breaks C# language server Omnisharp, which no longer finds SDK for .NET.

#+begin_src elisp
(setenv "PATH" (concat
		(substitute-in-file-name "$SCOOP/apps/findutils/current/bin;")
		(substitute-in-file-name "$SCOOP/apps/coreutils/current/bin;")
		(getenv "PATH")))
#+end_src

* Programming

** Git integration (Magit)
#+begin_src elisp 
(use-package magit
  :ensure t
  :config
  (nvmap :prefix "SPC"
         "m"      '(magit :which-key "Magit")))
#+end_src

** Formatting
#+begin_src elisp
  (use-package editorconfig
  :ensure t
  :config (editorconfig-mode 1))
#+end_src

#+begin_src elisp
(use-package aggressive-indent
  :ensure t) 
#+end_src

** Advanced language support
*** Rust
#+begin_src elisp
(use-package rust-mode
  :ensure t)
#+end_src
*** C#
#+begin_src elisp
(use-package csharp-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.csx\\'" . csharp-mode))
  :hook (csharp-mode . aggressive-indent-mode))
#+end_src
*** XML
~nxml-mode~ is included in Emacs by default, but it needs to be setup for XML Schema Definition files.
#+begin_src elisp
(add-to-list 'auto-mode-alist '("\\.xsd\\'" . nxml-mode))
#+end_src
*** Language Server Protocol (Eglot)
Eglot is a language server protocol client, which can provide all sorts of IDE-like functionality to Emacs, like symbol renaming, formatting and applying code actions. Here we map different programming modes to language servers to use.

#+begin_src elisp
(use-package eglot
  :ensure t
  :hook ((csharp-mode . eglot-ensure)
	 (nxml-mode   . eglot-ensure))
  :config
  (add-to-list 'eglot-server-programs '(csharp-mode "D:/scoop/apps/omnisharp/current/omnisharp.exe" "-lsp"))
  (add-to-list 'eglot-server-programs '(nxml-mode "lemminx"))
  :general
  (nvmap :prefix "SPC"
	       "e f"   '(eglot-format :which-key "Eglot format")
	       "e q"   '(eglot-code-action-quickfix :which-key "Eglot quick fix")
	       "e a"   '(eglot-code-actions :which-key "Eglot code actions")
	       "e o"   '(eglot-code-action-organize-imports :which-key "Eglot organize imports")
	       "e r"   '(eglot-rename :which-key "Eglot rename")))
#+end_src

** Programming helpers

*** Keybindings
#+begin_src elisp
(nvmap :prefix "SPC"
       "c c"   '(comment-line :which-key "Comment line")
       "c r"   '(comment-region :which-key "Comment region")
       "f p"   '(flymake-goto-prev-error :which-key "Goto previous error")
       "f n"   '(flymake-goto-next-error :which-key "Goto next error"))
#+end_src

*** YASnippet
~yasnippet~ lets you configure your own custom snippets, so you don't need to write boilerplate code.
#+begin_src elisp
(use-package yasnippet
  :ensure t
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  (yas-global-mode 1))
#+end_src

*** Company-mode
~company~ is a text completion framework, which will give symbol suggestions as you write code. ~company~ doesn't play nice with ~yasnippet~ out of the box, so we'll need to give it a little help.

#+begin_src elisp
(defun company-yasnippet-or-completion ()
  (interactive)
  (let ((yas-fallback-behavior nil))
    (unless (yas-expand)
      (call-interactively #'company-complete-common))))

(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0
	      company-minimum-prefix-length 1)
  (add-hook 'company-mode-hook (lambda ()
	  (substitute-key-definition 'company-complete-common
                               'company-yasnippet-or-completion
			              company-active-map)))
  :hook ((csharp-mode . company-mode)
         (nxml-mode   . company-mode)))
#+end_src
